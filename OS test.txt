// Program 1
#include <unistd.h>
int main() {
    int nread;
    char buff[20];
    nread = read(0, buff, 10);
    write(1, buff, nread);
    return 0;
}

// Program 2
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
int main() {
    int f, f1;
    char buff[10];
    f = open("seeking", O_RDWR);
    f1 = lseek(f, 10, SEEK_SET);
    read(f, buff, 10);
    write(1, buff, 10);
    return 0;
}
_______________________________________________________________________________________

// Program 3: Writer Process
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/shm.h>
#include<string.h>
int main() {
    int shmid;
    void *shared_memory;
    char buff[100];
    shmid = shmget((key_t)2345, 1024, 0666 | IPC_CREAT);
    printf("Key of shared memory is %d\n", shmid);
    shared_memory = shmat(shmid, NULL, 0);
    printf("Process attached at %p\n", shared_memory);
    printf("Enter some data to write to shared memory\n");
    read(0, buff, 100);
    strcpy(shared_memory, buff);
    printf("You wrote : %s\n", (char *)shared_memory);
    return 0;
}

// Program 3: Reader Process
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/shm.h>
#include<string.h>
int main() {
    int shmid;
    void *shared_memory;
    shmid = shmget((key_t)2345, 1024, 0666);
    printf("Key of shared memory is %d\n", shmid);
    shared_memory = shmat(shmid, NULL, 0);
    printf("Process attached at %p\n", shared_memory);
    printf("Data read from shared memory is : %s\n", (char *)shared_memory);
    return 0;
}
____________________________________________________________________________________________________________
// Program 4
#include<stdio.h>
int main() {
    int buffer[10], bufsize = 10, in = 0, out = 0, produce, consume, choice = 0;
    while(choice != 3) {
        printf("\n1. Produce\t2. Consume\t3. Exit\nEnter your choice: ");
        scanf("%d", &choice);
        switch(choice) {
            case 1:
                if((in + 1) % bufsize == out)
                    printf("\nBuffer is Full");
                else {
                    printf("\nEnter the value: ");
                    scanf("%d", &produce);
                    buffer[in] = produce;
                    in = (in + 1) % bufsize;
                }
                break;
            case 2:
                if(in == out)
                    printf("\nBuffer is Empty");
                else {
                    consume = buffer[out];
                    printf("\nThe consumed value is %d", consume);
                    out = (out + 1) % bufsize;
                }
                break;
        }
    }
    return 0;
}
_____________________________________________________________________________________________

// Program 5
#include<stdio.h>
#include<stdlib.h>
int one();
int two();
int tph, philname[20], status[20], howhung, hu[20], cho;
int main()
{
    int i;
    printf("\n\nDINING PHILOSOPHER PROBLEM");
    printf("\nEnter the total no. of philosophers: ");
    scanf("%d",&tph);
    for(i=0;i<tph;i++)
    {
        philname[i] = (i+1); status[i]=1;
    }
    printf("How many are hungry : ");
    scanf("%d", &howhung);
    if(howhung==tph)
    {
        printf("\nAll are hungry..\nDead lock stage will occur");
        printf("\nExiting..");
    }
    else
    {
        for(i=0;i<howhung;i++)
        {
            printf("Enter philosopher %d position: ",(i+1));
            scanf("%d", &hu[i]); status[hu[i]]=2;
        }
        do{
            printf("1.One can eat at a time\t2.Two can eat at a time\t3.Exit\nEnter your choice:");
            scanf("%d", &cho);
            switch(cho)
            {
                case 1:
                        one();
                        break;
                case 2:
                        two();
                        break;
                case 3:
                    exit(0);
                default:
                    printf("\nInvalid option..");
            }
        } while(1);
    }
}
int one()
{
    int pos=0, x, i;
    printf("\nAllow one philosopher to eat at any time\n");
    for(i=0;i<howhung; i++, pos++)
    { 
        printf("\nP %d is granted to eat", philname[hu[pos]]);
        for(x=pos;x<howhung;x++)
            printf("\nP %d is waiting", philname[hu[x]]);
    }
}
int two()
{
    int i, j, s=0, t, r, x;
    printf("\n Allow two philosophers to eat at same time\n");
    for(i=0;i<howhung;i++)
    {
        for(j=i+1;j<howhung;j++)
        {
            if(abs(hu[i]-hu[j])>=1 && abs(hu[i]-hu[j])!=4)
            {
                printf("\n\ncombination %d \n", (s+1));
                t=hu[i];
                r=hu[j];
                s++;
                printf("\nP %d and P %d are granted to eat", philname[hu[i]], philname[hu[j]]);
                for(x=0;x<howhung;x++)
                {
                    if((hu[x]!=t)&&(hu[x]!=r))
                        printf("\nP %d is waiting", philname[hu[x]]);
                }
            }
        }
    }
}
_________________________________________________________________________________________________________________________________________

// Program 6
#include<stdio.h>
#include<conio.h>
main()
{
    int bt[20], wt[20], tat[20], i, n;
    float wtavg, tatavg;
    clrscr();
    printf("\nEnter the number of processes -- ");
    scanf("%d", &n);
    for(i=0;i<n;i++)
    {
        printf("\nEnter Burst Time for Process %d -- ", i);
        scanf("%d", &bt[i]);
    }
    wt[0] = wtavg = 0;
    tat[0] = tatavg = bt[0];
    for(i=1;i<n;i++)
    {
        wt[i] = wt[i-1] +bt[i-1];
        tat[i] = tat[i-1] +bt[i];
        wtavg = wtavg + wt[i];
        tatavg = tatavg + tat[i];
    }
    printf("\t PROCESS \tBURST TIME \t WAITING TIME\t TURNAROUND TIME\n");
    for(i=0;i<n;i++)
        printf("\n\t P%d \t\t %d \t\t %d \t\t %d", i, bt[i], wt[i], tat[i]);
    printf("\nAverage Waiting Time -- %f", wtavg/n);
    printf("\nAverage Turnaround Time -- %f", tatavg/n);
    getch();
}
__________________________________________________________________________________________________________________________________________

// Program 7
#include<stdio.h>
#include<conio.h>
int max[100][100];
int alloc[100][100];
int need[100][100];
int avail[100];
int n,r;
void input();
void show();
void cal();
int main()
{
    int i,j;
    printf("********** Banker's Algorithm ************\n");
    input();
    show();
    cal();
    getch();
    return 0;
}
void input()
{
    int i,j;
    printf("Enter the no of Processes\t");
    scanf("%d",&n);
    printf("Enter the no of resources instances\t");
    scanf("%d",&r);
    printf("Enter the Max Matrix\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<r;j++)
        {
            scanf("%d",&max[i][j]);
        }
    }
    printf("Enter the Allocation Matrix\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<r;j++)
        {
            scanf("%d",&alloc[i][j]);
        }
    }
    printf("Enter the available Resources\n");
    for(j=0;j<r;j++)
    {
        scanf("%d",&avail[j]);
    }
}
void show()
{
    int i,j;
    printf("Process\t Allocation\t Max\t Available\t");
    for(i=0;i<n;i++)
    {
        printf("\nP%d\t ",i+1);
        for(j=0;j<r;j++)
        {
            printf("%d ",alloc[i][j]);
        }
        printf("\t\t");
        for(j=0;j<r;j++)
        {
            printf("%d ",max[i][j]);
        }
        printf("\t\t");
        if(i==0)
        {
            for(j=0;j<r;j++)
                printf("%d ",avail[j]);
        }
        printf("\t\t");
    }
    printf("\n");
}
void cal()
{
    int finish[100],temp,need[100][100],flag=1,k,c1=0;
    int safe[100];
    int i,j;
    for(i=0;i<n;i++)
    {
        finish[i]=0;
    }
    for(i=0;i<n;i++)
    {
        for(j=0;j<r;j++)
        {
            need[i][j]=max[i][j]-alloc[i][j];
        }
    }
    printf("\n");
    printf("----Need Matrix-------\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<r;j++)
        {
            printf("%d   ",need[i][j]);
        }
        printf("\n");
    }
    printf("\n");
    while(flag)
    {
        flag=0;
        for(i=0;i<n;i++)
        {
            int c=0;
            for(j=0;j<r;j++)
            {
                if((finish[i]==0)&&(need[i][j]<=avail[j]))
                {
                    c++;
                    if(c==r)
                    {
                        for(k=0;k<r;k++)
                        {
                            avail[k]+=alloc[i][j];
                            finish[i]=1;
                            flag=1;
                        }
                        printf("P%d->",i);
                        if(finish[i]==1)
                        {
                            i=n;
                        }
                    }
                }
            }
        }
    }
    printf("\n\n");
    for(i=0;i<n;i++)
    {
        if(finish[i]==1)
        {
            c1++;
        }
        else
        {
            printf("P%d->",i);
        }
    }
    if(c1==n)
    {
        printf("\n The system is in safe state");
    }
    else
    {
        printf("\n Process are in dead lock");
        printf("\n System is in unsafe state");
    }
}
__________________________________________________________________________________________________________________________________

// Program 8a: First Fit
#include<stdio.h>
#include<conio.h>
#define max 25
void main() {
    int frag[max], b[max], f[max], i, j, nb, nf, temp;
    static int bf[max], ff[max];
    clrscr();
    printf("\n\tMemory Management Scheme - First Fit");
    printf("\nEnter the number of blocks:");
    scanf("%d", &nb);
    printf("Enter the number of files:");
    scanf("%d", &nf);
    printf("\nEnter the size of the blocks:-\n");
    for(i = 1; i <= nb; i++) {
        printf("Block %d:", i);
        scanf("%d", &b[i]);
    }
    printf("Enter the size of the files :-\n");
    for(i = 1; i <= nf; i++) {
        printf("File %d:", i);
        scanf("%d", &f[i]);
    }
    for(i = 1; i <= nf; i++) {
        for(j = 1; j <= nb; j++) {
            if(bf[j] != 1) {
                temp = b[j] - f[i];
                if(temp >= 0) {
                    ff[i] = j;
                    break;
                }
            }
        }
        frag[i] = temp;
        bf[ff[i]] = 1;
    }
    printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragement");
    for(i = 1; i <= nf; i++)
        printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, f[i], ff[i], b[ff[i]], frag[i]);
    getch();
}

// Program 8b: Worst Fit
#include<stdio.h>
#include<conio.h>
#define max 25
void main() {
    int frag[max], b[max], f[max], i, j, nb, nf, temp, highest = 0;
    static int bf[max], ff[max];
    clrscr();
    printf("\n\tMemory Management Scheme - Worst Fit");
    printf("\nEnter the number of blocks:");
    scanf("%d", &nb);
    printf("Enter the number of files:");
    scanf("%d", &nf);
    printf("\nEnter the size of the blocks:-\n");
    for(i = 1; i <= nb; i++) {
        printf("Block %d:", i);
        scanf("%d", &b[i]);
    }
    printf("Enter the size of the files :-\n");
    for(i = 1; i <= nf; i++) {
        printf("File %d:", i);
        scanf("%d", &f[i]);
    }
    for(i = 1; i <= nf; i++) {
        for(j = 1; j <= nb; j++) {
            if(bf[j] != 1) {
                temp = b[j] - f[i];
                if(temp >= 0)
                    if(highest < temp) {
                        ff[i] = j;
                        highest = temp;
                    }
            }
        }
        frag[i] = highest;
        bf[ff[i]] = 1;
        highest = 0;
    }
    printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragement");
    for(i = 1; i <= nf; i++)
        printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, f[i], ff[i], b[ff[i]], frag[i]);
    getch();
}
_____________________________________________________________________________________________________________________________

// Program 9a: FIFO
#include<stdio.h>
#include<conio.h>
main() {
    int i, j, k, f, pf = 0, count = 0, rs[25], m[10], n;
    clrscr();
    printf("\nEnter the length of reference string -- ");
    scanf("%d", &n);
    printf("\nEnter the reference string -- ");
    for(i = 0; i < n; i++)
        scanf("%d", &rs[i]);
    printf("\nEnter no. of frames -- ");
    scanf("%d", &f);
    for(i = 0; i < f; i++)
        m[i] = -1;
    printf("\nThe Page Replacement Process is -- \n");
    for(i = 0; i < n; i++) {
        for(k = 0; k < f; k++) {
            if(m[k] == rs[i])
                break;
        }
        if(k == f) {
            m[count++] = rs[i];
            pf++;
        }
        for(j = 0; j < f; j++)
            printf("\t%d", m[j]);
        if(k == f)
            printf("\tPF No. %d", pf);
        printf("\n");
        if(count == f)
            count = 0;
    }
    printf("\nThe number of Page Faults using FIFO are %d", pf);
    getch();
}

// Program 9b: LRU
#include<stdio.h>
#include<conio.h>
main() {
    int i, j, k, min, rs[25], m[10], count[10], flag[25], n, f, pf = 0, next = 1;
    clrscr();
    printf("Enter the length of reference string -- ");
    scanf("%d", &n);
    printf("Enter the reference string -- ");
    for(i = 0; i < n; i++) {
        scanf("%d", &rs[i]);
        flag[i] = 0;
    }
    printf("Enter the number of frames -- ");
    scanf("%d", &f);
    for(i = 0; i < f; i++) {
        count[i] = 0;
        m[i] = -1;
    }
    printf("\nThe Page Replacement process is -- \n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < f; j++) {
            if(m[j] == rs[i]) {
                flag[i] = 1;
                count[j] = next;
                next++;
            }
        }
        if(flag[i] == 0) {
            if(i < f) {
                m[i] = rs[i];
                count[i] = next;
                next++;
            } else {
                min = 0;
                for(j = 1; j < f; j++)
                    if(count[min] > count[j])
                        min = j;
                m[min] = rs[i];
                count[min] = next;
                next++;
            }
            pf++;
        }
        for(j = 0; j < f; j++)
            printf("%d\t", m[j]);
        if(flag[i] == 0)
            printf("PF No. -- %d", pf);
        printf("\n");
    }
    printf("\nThe number of page faults using LRU are %d", pf);
    getch();
}
_____________________________________________________________________________________________________________________________________________

#include<stdio.h>
#include<conio.h>
#include<math.h>
int main() {
    int queue[100], t[100], head, seek = 0, n, i, j, temp;
    float avg;
    printf("*** SSTF Disk Scheduling Algorithm ***\n");
    printf("Enter the size of Queue\t");
    scanf("%d", &n);
    printf("Enter the Queue\t");
    for (i = 0; i < n; i++) {
        scanf("%d", &queue[i]);
    }
    printf("Enter the initial head position\t");
    scanf("%d", &head);
    for (i = 0; i < n; i++) {
        t[i] = abs(head - queue[i]);
    }
    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if (t[i] > t[j]) {
                temp = t[i];
                t[i] = t[j];
                t[j] = temp;
                temp = queue[i];
                queue[i] = queue[j];
                queue[j] = temp;
            }
        }
    }
    for (i = 0; i < n; i++) {
        seek += abs(head - queue[i]);
        head = queue[i];
    }
    printf("\nTotal Seek Time is %d\t", seek);
    avg = seek / (float)n;
    printf("\nAverage Seek Time is %f\t", avg);
    return 0;
}

#include<stdio.h>
int main() {
    int t[20], d[20], h, i, j, n, temp, k, atr[20], tot, p, sum = 0;
    printf("Enter the no of tracks to be traversed\t");
    scanf("%d", &n);
    printf("Enter the position of head\t");
    scanf("%d", &h);
    t[0] = 0; t[1] = h;
    printf("Enter the tracks\t");
    for (i = 2; i < n + 2; i++) {
        scanf("%d", &t[i]);
    }
    for (i = 0; i < n + 2; i++) {
        for (j = 0; j < (n + 2) - i - 1; j++) {
            if (t[j] > t[j + 1]) {
                temp = t[j];
                t[j] = t[j + 1];
                t[j + 1] = temp;
            }
        }
    }
    for (i = 0; i < n + 2; i++) {
        if (t[i] == h) {
            j = i;
            break;
        }
    }
    k = i;
    p = 0;
    while (t[j] != 0) {
        atr[p] = t[j];
        j--;
        p++;
    }
    atr[p] = t[j];
    for (p = k + 1; p < n + 2; p++, k++) {
        atr[p] = t[k + 1];
    }
    for (j = 0; j < n + 1; j++) {
        if (atr[j] > atr[j + 1]) {
            d[j] = atr[j] - atr[j + 1];
        } else {
            d[j] = atr[j + 1] - atr[j];
        }
        sum += d[j];
    }
    printf("\nAverage header movements: %f", (float)sum / n);
    return 0;
}
__________________________________________________________________________________________

11

#include<stdio.h>
#include<conio.h>
struct fileTable {
    char name[20];
    int sb, nob;
} ft[30];
void main() {
    int i, j, n;
    char s[20];
    printf("Enter no of files: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++) {
        printf("\nEnter file name %d: ", i + 1);
        scanf("%s", ft[i].name);
        printf("Enter starting block of file %d: ", i + 1);
        scanf("%d", &ft[i].sb);
        printf("Enter no of blocks in file %d: ", i + 1);
        scanf("%d", &ft[i].nob);
    }
    printf("\nEnter the file name to be searched: ");
    scanf("%s", s);
    for (i = 0; i < n; i++) {
        if (strcmp(s, ft[i].name) == 0) {
            break;
        }
    }
    if (i == n) {
        printf("\nFile Not Found");
    } else {
        printf("\nFILE NAME\tSTART BLOCK\tNO OF BLOCKS\tBLOCKS OCCUPIED\n");
        printf("\n%s\t\t%d\t\t%d\t", ft[i].name, ft[i].sb, ft[i].nob);
        for (j = 0; j < ft[i].nob; j++) {
            printf("%d, ", ft[i].sb + j);
        }
    }
    getch();
}

11b

#include<stdio.h>
#include<conio.h>
struct fileTable {
    char name[20];
    int nob, blocks[30];
} ft[30];
void main() {
    int i, j, n;
    char s[20];
    printf("Enter no of files: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++) {
        printf("\nEnter file name %d: ", i + 1);
        scanf("%s", ft[i].name);
        printf("Enter no of blocks in file %d: ", i + 1);
        scanf("%d", &ft[i].nob);
        printf("Enter the blocks of the file: ");
        for (j = 0; j < ft[i].nob; j++) {
            scanf("%d", &ft[i].blocks[j]);
        }
    }
    printf("\nEnter the file name to be searched: ");
    scanf("%s", s);
    for (i = 0; i < n; i++) {
        if (strcmp(s, ft[i].name) == 0) {
            break;
        }
    }
    if (i == n) {
        printf("\nFile Not Found");
    } else {
        printf("\nFILE NAME\tNO OF BLOCKS\tBLOCKS OCCUPIED\n");
        printf("\n%s\t\t%d\t\t", ft[i].name, ft[i].nob);
        for (j = 0; j < ft[i].nob; j++) {
            printf("%d, ", ft[i].blocks[j]);
        }
    }
    getch();
}

________________________________________________________________________________________________________________

#include<stdio.h>
#include<conio.h>
main() {
    int i, j, k, f, pf = 0, count = 0, rs[25], m[10], n;
    clrscr();
    printf("\nEnter the length of reference string -- ");
    scanf("%d", &n);
    printf("\nEnter the reference string -- ");
    for (i = 0; i < n; i++)
        scanf("%d", &rs[i]);
    printf("\nEnter no. of frames -- ");
    scanf("%d", &f);
    for (i = 0; i < f; i++)
        m[i] = -1;
    printf("\nThe Page Replacement Process is -- \n");
    for (i = 0; i < n; i++) {
        for (k = 0; k < f; k++) {
            if (m[k] == rs[i]) break;
        }
        if (k == f) {
            m[count++] = rs[i];
            pf++;
        }
        for (j = 0; j < f; j++)
            printf("\t%d", m[j]);
        if (k == f)
            printf("\tPF No. %d", pf);
        printf("\n");
        if (count == f)
            count = 0;
    }
    printf("\nThe number of Page Faults using FIFO are %d", pf);
    getch();
}

#include<stdio.h>
#include<conio.h>
main() {
    int i, j, k, min, rs[25], m[10], count[10], flag[25], n, f, pf = 0, next = 1;
    clrscr();
    printf("Enter the length of reference string -- ");
    scanf("%d", &n);
    printf("Enter the reference string -- ");
    for (i = 0; i < n; i++) {
        scanf("%d", &rs[i]);
        flag[i] = 0;
    }
    printf("Enter the number of frames -- ");
    scanf("%d", &f);
    for (i = 0; i < f; i++) {
        count[i] = 0;
        m[i] = -1;
    }
    printf("\nThe Page Replacement process is -- \n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < f; j++) {
            if (m[j] == rs[i]) {
                flag[i] = 1;
                count[j] = next;
                next++;
            }
        }
        if (flag[i] == 0) {
            if (i < f) {
                m[i] = rs[i];
                count[i] = next;
                next++;
            } else {
                min = 0;
                for (j = 1; j < f; j++)
                    if (count[min] > count[j])
                        min = j;
                m[min] = rs[i];
                count[min] = next;
                next++;
            }
            pf++;
        }
        for (j = 0; j < f; j++)
            printf("%d\t", m[j]);
        if (flag[i] == 0)
            printf("PF No. -- %d", pf);
        printf("\n");
    }
    printf("\nThe number of page faults using LRU are %d", pf);
    getch();
}
